---
import LayoutWithHero from "../layouts/LayoutWithHero.astro";
import ImgHero from "../assets/img/headerPages.webp";
import ImgHeroDesktop from "../assets/img/headerPagesDesktop.webp";
import Card from "../components/Card.astro";
import CardActivite from "../components/CardActivite.astro";
import {
    getAllFilms,
    getAllActivities,
} from "../../backend/pocketbase/backend.mjs";

const title = "Programmation";
const subTitle = "D√©couvrez les films et activit√©s";
const description =
    "Retrouvez tous les films projet√©s et les activit√©s du festival.";

// R√©cup√©rer les donn√©es et pr√©parer les filtres
const films = await getAllFilms();
const activites = await getAllActivities();
const filmsWithFavorites = films.map((film) => ({
    ...film,
    favori: film.hasOwnProperty("favori") ? film.favori : false,
}));
const genres = [
    ...new Set(
        filmsWithFavorites.map((film) => film.genre_film).filter(Boolean),
    ),
];
const activityTypes = [...new Set(activites.map((a) => a.type_activite))];

// Conversion en JSON pour le frontend
const filmsJson = JSON.stringify(filmsWithFavorites);
const activitesJson = JSON.stringify(activites);
---

<LayoutWithHero
    title={title}
    description={description}
    subTitle={subTitle}
    src={ImgHero}
    srcDesktop={ImgHeroDesktop}
    alt="hero"
    classLayout="h-65"
>
    <Fragment slot="content">
        <p class="text-center">
            Retrouvez tous les films et activit√©s organis√©s durant le festival.
        </p>

        <!-- üé¨ FILMS -->
        <section class="mt-12">
            <h2 class="text-2xl font-bold text-center mb-6">Films</h2>

            <!-- Filtres pour les films -->
            <div class="flex flex-wrap justify-center gap-4 mb-8">
                <button id="show-all-films" class="filter-btn active"
                    >Tous les films</button
                >
                <button id="show-favorites-films" class="filter-btn"
                    >Mes favoris</button
                >
                <button id="sort-date-films" class="filter-btn"
                    >Trier par date ‚¨Ü</button
                >
            </div>

            <!-- Filtres par genre -->
            <div class="mb-8 text-center">
                <h4 class="text-lg font-semibold mb-3">Filtrer par genre</h4>
                <div
                    id="genre-filters"
                    class="flex flex-wrap justify-center gap-2"
                >
                    <button data-genre="all" class="genre-filter active"
                        >Tous</button
                    >
                    {
                        genres.map((genre) => (
                            <button data-genre={genre} class="genre-filter">
                                {genre}
                            </button>
                        ))
                    }
                </div>
            </div>

            <!-- Affichage des films -->
            <div id="films-grid" class="grid grid-cols-2 sm:grid-cols-3 gap-6">
                {
                    filmsWithFavorites.length > 0 ? (
                        filmsWithFavorites.map((film) => (
                            <div
                                class="w-full mx-auto relative film-card"
                                data-genre={film.genre_film}
                                data-date={film.date_projection}
                                data-favori={film.favori.toString()}
                            >
                                <div class="absolute top-2 right-2 z-10">
                                    <button
                                        data-id={film.id}
                                        class="favorite-toggle p-2 bg-white bg-opacity-70 rounded-full shadow"
                                    >
                                        <svg
                                            class={`w-6 h-6 favorite-icon ${film.favori ? "text-yellow-500" : "text-gray-400"}`}
                                            fill={
                                                film.favori
                                                    ? "currentColor"
                                                    : "none"
                                            }
                                            stroke="currentColor"
                                            viewBox="0 0 20 20"
                                        >
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292z" />
                                        </svg>
                                    </button>
                                </div>
                                <Card {...film} />
                            </div>
                        ))
                    ) : (
                        <p class="col-span-full text-center">
                            Aucun film √† afficher.
                        </p>
                    )
                }
            </div>
        </section>

        <!-- üé≠ ACTIVIT√âS -->
        <section class="mt-16">
            <h2 class="text-2xl font-bold text-center mb-6">Activit√©s</h2>

            <!-- Filtres pour les activit√©s -->
            <div class="flex flex-wrap justify-center gap-4 mb-8">
                <button id="show-all-activities" class="filter-btn active"
                    >Toutes les activit√©s</button
                >
                <button id="sort-date-activities" class="filter-btn"
                    >Trier par date ‚¨Ü</button
                >
            </div>

            <!-- Filtres par type -->
            <div class="mb-8 text-center">
                <h4 class="text-lg font-semibold mb-3">Filtrer par type</h4>
                <div
                    id="type-filters"
                    class="flex flex-wrap justify-center gap-2"
                >
                    <button data-type="all" class="type-filter active"
                        >Tous</button
                    >
                    {
                        activityTypes.map((type) => (
                            <button data-type={type} class="type-filter">
                                {type}
                            </button>
                        ))
                    }
                </div>
            </div>

            <!-- Affichage des activit√©s -->
            <div
                id="activities-grid"
                class="grid grid-cols-2 sm:grid-cols-3 gap-6"
            >
                {
                    activites.length > 0 ? (
                        activites.map((activite) => (
                            <div
                                class="activity-card"
                                data-type={activite.type_activite}
                                data-date={activite.date_activite}
                            >
                                <CardActivite {...activite} />
                            </div>
                        ))
                    ) : (
                        <p class="col-span-full text-center">
                            Aucune activit√© √† afficher.
                        </p>
                    )
                }
            </div>
        </section>
    </Fragment>
</LayoutWithHero>

<script define:vars={{ filmsJson, activitesJson }}>
    // Initialisation des donn√©es et variables
    let filmsData = JSON.parse(filmsJson);
    let activitesData = JSON.parse(activitesJson);
    let filmsSortDirection = "asc";
    let activitiesSortDirection = "asc";

    document.addEventListener("DOMContentLoaded", function () {
        initFavorites();
        setupFilters();
    });

    // Initialisation des favoris depuis localStorage
    function initFavorites() {
        const savedFavorites = localStorage.getItem("filmFavorites");
        if (savedFavorites) {
            const favoriteIds = JSON.parse(savedFavorites);
            filmsData.forEach(
                (film) => (film.favori = favoriteIds.includes(film.id)),
            );
            updateFavoriteIcons();
        }
        document
            .querySelectorAll(".favorite-toggle")
            .forEach((btn) => btn.addEventListener("click", toggleFavorite));
    }

    // Mise √† jour des ic√¥nes selon l'√©tat favori
    function updateFavoriteIcons() {
        document.querySelectorAll(".film-card").forEach((card) => {
            const btn = card.querySelector(".favorite-toggle");
            const filmId = btn.dataset.id;
            const film = filmsData.find((f) => f.id === filmId);
            const icon = btn.querySelector(".favorite-icon");

            card.setAttribute("data-favori", film.favori.toString());
            icon.classList.toggle("text-yellow-500", film.favori);
            icon.classList.toggle("text-gray-400", !film.favori);
            icon.setAttribute("fill", film.favori ? "currentColor" : "none");
        });
    }

    // Basculer l'√©tat favori d'un film
    function toggleFavorite(e) {
        const filmId = e.currentTarget.dataset.id;
        const film = filmsData.find((f) => f.id === filmId);
        if (film) {
            film.favori = !film.favori;
            updateFavoriteIcons();
            const favoriteIds = filmsData
                .filter((f) => f.favori)
                .map((f) => f.id);
            localStorage.setItem("filmFavorites", JSON.stringify(favoriteIds));
        }
    }

    // Configuration des filtres et √©couteurs d'√©v√©nements
    function setupFilters() {
        // Films: tous, favoris et tri par date
        document
            .getElementById("show-all-films")
            .addEventListener("click", function () {
                resetActiveButtons(".filter-btn", this);
                document
                    .querySelectorAll(".film-card")
                    .forEach((card) => (card.style.display = "block"));
            });

        document
            .getElementById("show-favorites-films")
            .addEventListener("click", function () {
                resetActiveButtons(".filter-btn", this);
                document.querySelectorAll(".film-card").forEach((card) => {
                    card.style.display =
                        card.getAttribute("data-favori") === "true"
                            ? "block"
                            : "none";
                });
            });

        document
            .getElementById("sort-date-films")
            .addEventListener("click", function () {
                sortByDate(
                    "films-grid",
                    ".film-card",
                    "data-date",
                    filmsSortDirection,
                );
                filmsSortDirection =
                    filmsSortDirection === "asc" ? "desc" : "asc";
                this.textContent = `Trier par date ${filmsSortDirection === "asc" ? "‚¨Ü" : "‚¨á"}`;
            });

        // Films: filtres par genre
        document.querySelectorAll(".genre-filter").forEach((btn) => {
            btn.addEventListener("click", function () {
                resetActiveButtons(".genre-filter", this);
                const genre = this.dataset.genre;
                document.querySelectorAll(".film-card").forEach((card) => {
                    card.style.display =
                        genre === "all" ||
                        card.getAttribute("data-genre") === genre
                            ? "block"
                            : "none";
                });
            });
        });

        // Activit√©s: tous et tri par date
        document
            .getElementById("show-all-activities")
            .addEventListener("click", function () {
                resetActiveButtons("#show-all-activities, .type-filter", this);
                document
                    .querySelectorAll(".activity-card")
                    .forEach((card) => (card.style.display = "block"));
            });

        document
            .getElementById("sort-date-activities")
            .addEventListener("click", function () {
                sortByDate(
                    "activities-grid",
                    ".activity-card",
                    "data-date",
                    activitiesSortDirection,
                );
                activitiesSortDirection =
                    activitiesSortDirection === "asc" ? "desc" : "asc";
                this.textContent = `Trier par date ${activitiesSortDirection === "asc" ? "‚¨Ü" : "‚¨á"}`;
            });

        // Activit√©s: filtres par type
        document.querySelectorAll(".type-filter").forEach((btn) => {
            btn.addEventListener("click", function () {
                resetActiveButtons(".type-filter", this);
                const type = this.dataset.type;
                document.querySelectorAll(".activity-card").forEach((card) => {
                    card.style.display =
                        type === "all" ||
                        card.getAttribute("data-type") === type
                            ? "block"
                            : "none";
                });
            });
        });
    }

    // Fonctions utilitaires
    function resetActiveButtons(selector, activeButton) {
        document
            .querySelectorAll(selector)
            .forEach((btn) => btn.classList.remove("active"));
        activeButton.classList.add("active");
    }

    function sortByDate(gridId, cardSelector, dateAttr, direction) {
        const grid = document.getElementById(gridId);
        const cards = Array.from(document.querySelectorAll(cardSelector));

        cards.sort((a, b) => {
            const dateA = new Date(a.getAttribute(dateAttr));
            const dateB = new Date(b.getAttribute(dateAttr));
            return direction === "asc" ? dateA - dateB : dateB - dateA;
        });

        grid.innerHTML = "";
        cards.forEach((card) => grid.appendChild(card));
    }
</script>

<style>
    .filter-btn,
    .genre-filter,
    .type-filter {
        padding: 0.5rem 0.75rem;
        background-color: #f3f4f6;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition:
            background-color 0.2s,
            color 0.2s;
    }

    .filter-btn:hover,
    .genre-filter:hover,
    .type-filter:hover {
        background-color: #e5e7eb;
    }

    .filter-btn.active,
    .genre-filter.active,
    .type-filter.active {
        background-color: #3b82f6;
        color: white;
    }

    .filter-btn.active:hover,
    .genre-filter.active:hover,
    .type-filter.active:hover {
        background-color: #2563eb;
    }
</style>
